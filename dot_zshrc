export EDITOR="nvim"
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"


# soruce zinit
# source /home/linuxbrew/.linuxbrew/opt/zinit/zinit.zsh

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

plugins=(
	git
  ssh
	colored-man-pages
  redis-cli
  starship
)

source $ZSH/oh-my-zsh.sh

export LANG=en_US.UTF-8

# # Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi


# # NVM setup
# export NVM_DIR="$HOME/.nvm"
# [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
#
# # place this after nvm initialization!
# autoload -U add-zsh-hook
#
# load-nvmrc() {
#   local nvmrc_path
#   nvmrc_path="$(nvm_find_nvmrc)"
#
#   if [ -n "$nvmrc_path" ]; then
#     local nvmrc_node_version
#     nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
#
#     if [ "$nvmrc_node_version" = "N/A" ]; then
#       nvm install
#     elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
#       nvm use
#     fi
#   elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
#     echo "Reverting to nvm default version"
#     nvm use default
#   fi
# }

# add-zsh-hook chpwd load-nvmrc
# load-nvmrc


#short cuts 
alias 'lg'='lazygit --debug | tee ~/lazygit-debug.log'
# alias 'jsb'='js-beautify'
alias killnvim='ps -ef | grep "nvim" | grep -v grep | awk '{print $2}' | xargs kill -s KILL'
# spotx
alias spotx='bash <(curl -sSL https://spotx-official.github.io/run.sh)'
alias leet='nvim leetcode.nvim'
alias findimg='find . -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" -o -iname "*.webp" -o -iname "*.svg" -o -iname "*.html" \) | fzf'

delete() {
  for file in "$@"; do
    if [ -e "$file" ]; then
      base_name=$(basename "$file")
      trash_path="$HOME/.Trash/$base_name"
      counter=1
      while [ -e "$trash_path" ]; do
        trash_path="$HOME/.Trash/${base_name}_backup_$counter"
        ((counter++))
      done
      mv -v "$file" "$trash_path"
    else
      echo "File not found: $file"
    fi
  done
}


alias 'fcd'='cd $(find . -type d -print | fzf)'
alias 'fgc'='git checkout $(git branch | fzf)'

# bun completions
[ -s "/Users/haroonalbar/.bun/_bun" ] && source "/Users/haroonalbar/.bun/_bun"


# yazi
function y() {
        local tmp="$(mktemp -t "yazi-cwd.XXXXX")"
        yazi "$@" --cwd-file="$tmp"
        if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
                cd -- "$cwd"
        fi
        rm -f -- "$tmp"
}

# =============================================================================
#
# Utility functions for zoxide.
#

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
function __zoxide_pwd() {
    \builtin pwd -L
}

# cd + custom logic based on the value of _ZO_ECHO.
function __zoxide_cd() {
    # shellcheck disable=SC2164
    \builtin cd -- "$@"
}

# =============================================================================
#
# Hook configuration for zoxide.
#

# Hook to add new entries to the database.
function __zoxide_hook() {
    # shellcheck disable=SC2312
    \command zoxide add -- "$(__zoxide_pwd)"
}

# Initialize hook.
# shellcheck disable=SC2154
if [[ ${precmd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]] && [[ ${chpwd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]]; then
    chpwd_functions+=(__zoxide_hook)
fi

# =============================================================================
#
# When using zoxide with --no-cmd, alias these internal functions as desired.
#

__zoxide_z_prefix='z#'

# Jump to a directory using only keywords.
function __zoxide_z() {
    # shellcheck disable=SC2199
    if [[ "$#" -eq 0 ]]; then
        __zoxide_cd ~
    elif [[ "$#" -eq 1 ]] && { [[ -d "$1" ]] || [[ "$1" = '-' ]] || [[ "$1" =~ ^[-+][0-9]$ ]]; }; then
        __zoxide_cd "$1"
    elif [[ "$@[-1]" == "${__zoxide_z_prefix}"?* ]]; then
        # shellcheck disable=SC2124
        \builtin local result="${@[-1]}"
        __zoxide_cd "${result:${#__zoxide_z_prefix}}"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" &&
            __zoxide_cd "${result}"
    fi
}

# Jump to a directory using interactive search.
function __zoxide_zi() {
    \builtin local result
    result="$(\command zoxide query --interactive -- "$@")" && __zoxide_cd "${result}"
}

# Completions.
if [[ -o zle ]]; then
    function __zoxide_z_complete() {
        # Only show completions when the cursor is at the end of the line.
        # shellcheck disable=SC2154
        [[ "${#words[@]}" -eq "${CURRENT}" ]] || return 0

        if [[ "${#words[@]}" -eq 2 ]]; then
            _files -/
        elif [[ "${words[-1]}" == '' ]] && [[ "${words[-2]}" != "${__zoxide_z_prefix}"?* ]]; then
            \builtin local result
            # shellcheck disable=SC2086,SC2312
            if result="$(\command zoxide query --exclude "$(__zoxide_pwd)" --interactive -- ${words[2,-1]})"; then
                result="${__zoxide_z_prefix}${result}"
                # shellcheck disable=SC2296
                compadd -Q "${(q-)result}"
            fi
            \builtin printf '\e[5n'
        fi
        return 0
    }

    \builtin bindkey '\e[0n' 'reset-prompt'
    [[ "${+functions[compdef]}" -ne 0 ]] && \compdef __zoxide_z_complete __zoxide_z
fi

# =============================================================================
#
# Commands for zoxide. Disable these using --no-cmd.
#

\builtin alias z=__zoxide_z
\builtin alias zi=__zoxide_zi

# =============================================================================
#
# To initialize zoxide, add this to your configuration (usually ~/.zshrc):
#
eval "$(zoxide init zsh)"

# starship
eval "$(starship init zsh)"



# Colourise go test
gotest() {
  go test $* | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' | sed ''/SKIP/s//$(printf "\033[34mSKIP\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' | GREP_COLOR="01;33" egrep --color=always '\s*[a-zA-Z0-9\-_.]+[:][0-9]+[:]|^'
}

# hide
alias hidet='tmux set-option status off'
alias showt='tmux set-option status on'

# Homebrew for WSL
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
export PATH="/home/linuxbrew/.linuxbrew/sbin:$PATH"
export PATH="/home/linuxbrew/.linuxbrew/opt/go@1.21/bin/:$PATH"


# go bin
export PATH="/home/haroon/go/bin:$PATH"

# home .bin
export PATH="/home/haroon/.bin:$PATH"


# azure iouring
export GOPRIVATE=dev.azure.com

# cache
export GOMODCACHE=$(go env GOMODCACHE)

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion


# # pnpm
# export PNPM_HOME="/home/haroon/.local/share/pnpm"
# case ":$PATH:" in
#   *":$PNPM_HOME:"*) ;;
#   *) export PATH="$PNPM_HOME:$PATH" ;;
# esac
# # pnpm end
#
export PNPM_HOME="/home/haroon/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac


# set ticket and commit on it

# Function to set the ticket number
set_ticket() {
    local ticket_file="$HOME/.git_ticket_info"

    # Load from file if no arguments provided
    if [[ -z $1 ]]; then
        if [[ -f $ticket_file ]]; then
            source "$ticket_file"
            echo "Ticket: $GIT_TICKET_NUMBER"
            echo "Msg: $GIT_TICKET_MSG"
        else
            echo "No ticket information saved."
        fi
        return 1
    fi

    # Validate ticket number
    if [[ ! $1 =~ ^[0-9]+$ ]]; then
        echo "<ticket_number> should be a number"
        return 1
    fi

    # Set and export ticket number
    export GIT_TICKET_NUMBER="$1"

    # Set and export message if provided
    if [[ -n $2 ]]; then
        export GIT_TICKET_MSG="$2"
    else
        export GIT_TICKET_MSG=""
    fi

    # Save to file
    {
        echo "export GIT_TICKET_NUMBER=\"$GIT_TICKET_NUMBER\""
        echo "export GIT_TICKET_MSG=\"$GIT_TICKET_MSG\""
    } > "$ticket_file"

    echo "Ticket number set to: $GIT_TICKET_NUMBER"
    [[ -n $GIT_TICKET_MSG ]] && echo "Message: $GIT_TICKET_MSG"
}

# Function to commit with the ticket number
git_commit_with_ticket() {
    if [[ -z $1 ]]; then
        echo "Usage: git_commit_with_ticket <message>"
        return 1
    fi
    if [[ -z $GIT_TICKET_NUMBER ]]; then
        echo "Error: Ticket number not set. Use set_ticket <ticket_number> to initialize."
        return 1
    fi

    # Append the ticket number to the commit message
    git commit -m "$1 #$GIT_TICKET_NUMBER"
}

# Optionally, make aliases for convenience
alias gct="set_ticket"
alias gcm="git_commit_with_ticket"
# alias superfilein=`bash -c "$(curl -sLo- https://superfile.netlify.app/install.sh)"`
# export PATH="${HOME}/.local/bin":${PATH}
# export PATH="${HOME}/.local/bin":${PATH}
#
source <(fzf --zsh)

# BASH
#
# exercism () {
#     local out
#     readarray -t out < <(command exercism "$@")
#     printf '%s\n' "${out[@]}"
#     if [[ $1 == "download" && -d "${out[-1]}" ]]; then
#         cd "${out[-1]}" || return 1
#     fi
# }
#
exercism() {
    local out
    out=("${(@f)$(command exercism "$@")}")  # Capture output as an array, splitting on newlines
    printf '%s\n' "${out[@]}"
    
    if [[ $1 == "download" && -d "${out[-1]}" ]]; then
        cd "${out[-1]}" || return 1
    fi
}

alias durls='urls.sh'
alias open='explorer.exe'
alias rgs="rg --no-heading --line-number --color=always '' | fzf --ansi --delimiter : --preview 'bat --style=numbers --color=always {1} --line-range {2}:' --bind 'enter:execute(nvim +{2} {1})'"
export PATH="/home/linuxbrew/.linuxbrew/opt/go@1.21/bin:$PATH"
# alias lint='nodemon --watch src --ext go --exec "golangci-lint run -c .golint.yml --fix"'
alias lint='nodemon --watch src --ext go --exec "lint.sh"'
alias lintfix='golangci-lint run -c .golint.yml --fix'

# export PATH="$HOME/.jenv/bin:$PATH"
# eval "$(jenv init -)"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
source "$HOME/.sdkman/bin/sdkman-init.sh"
